// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SicoobTeste.Models
{
    public partial class SicoobTesteContext : DbContext
    {
        public SicoobTesteContext()
        {
        }

        public SicoobTesteContext(DbContextOptions<SicoobTesteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AplicacaoCota> AplicacaoCota { get; set; }
        public virtual DbSet<Cartoes> Cartoes { get; set; }
        public virtual DbSet<ChequeEspecial> ChequeEspecial { get; set; }
        public virtual DbSet<Endividamento> Endividamento { get; set; }
        public virtual DbSet<EndividamentoExterno> EndividamentoExterno { get; set; }
        public virtual DbSet<EndividamentoInterno> EndividamentoInterno { get; set; }
        public virtual DbSet<Garantias> Garantias { get; set; }
        public virtual DbSet<IAP> IAP { get; set; }
        public virtual DbSet<LimiteCCL> LimiteCCL { get; set; }
        public virtual DbSet<LimiteCredito> LimiteCredito { get; set; }
        public virtual DbSet<MargemContribuicao> MargemContribuicao { get; set; }
        public virtual DbSet<MediaEntradaSemestral> MediaEntradaSemestral { get; set; }
        public virtual DbSet<MediaTrimestral> MediaTrimestral { get; set; }
        public virtual DbSet<PatrimonioCadastroAssociado> PatrimonioCadastroAssociado { get; set; }
        public virtual DbSet<PreAprovado> PreAprovado { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<SerasaDetalhado> SerasaDetalhado { get; set; }
        public virtual DbSet<Tarifas> Tarifas { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UtilizacaoLimiteCredito> UtilizacaoLimiteCredito { get; set; }
        public virtual DbSet<ValorLimiteCRL> ValorLimiteCRL { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AplicacaoCota>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoClienteContaCapitalDiario).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SaldoDiarioRDC).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Cartoes>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Datas).HasColumnType("date");

                entity.Property(e => e.DividaConsolidada).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LimiteAtribuido).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LimiteDisponivel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LimiteUtilizado).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ChequeEspecial>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.QuantidadeDiasUtilizacao).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorLimiteCreditoContratato).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorSaldoDevedor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorUtilizado).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Endividamento>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrigemPrejuizo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoDevedorDiario).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubmodalidadeBacen)
                    .HasMaxLength(120)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EndividamentoExterno>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Prejuizo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SaldoDevedor).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubmodalidadeBacen).HasColumnType("text");

                entity.Property(e => e.ValorVencerApos360Dias).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorVencerAte360Dias).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorVencido).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<EndividamentoInterno>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.INAD15).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.INAD90).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ModalidadeProduto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoDevedorDiario).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorContrato).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Garantias>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GarantiaEnquadramento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoGarantiaEnquadramento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorTotalGarantia).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<IAP>(entity =>
            {
                entity.Property(e => e.Automovel)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CartaoCredito)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CartaoDebito)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeEspecial)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cobranca)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Consorcio)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContaCapital)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContaCorrenteAtiva)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContaCorrenteInativa)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CreditoRural)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DebitoAutomaticoEfetivado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Emprestimo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Financiamento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Imovel)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Investimento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LCA)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LCI)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MobileBanking)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Moto)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PacoteTarifas)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Poupanca)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PreAprovado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Previdencia)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProdutoRDC)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProdutorRural)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SIPAG)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SeguroAuto)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SeguroGeral)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SeguroMassificados)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SeguroRural)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SeguroVida)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SeguroVidaPF_PJ)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Servicos)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SicoobEmpresarial)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SicoobNet)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TituloDescontado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VidaPrestamista)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LimiteCCL>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DataVigenciaLimite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescricaoNivelRiscoBACEN)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescricaoNivelRiscoCRL)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModalidadeBacen)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NivelRiscoCliente)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorLimiteConcedido).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorLimiteUtilizado).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<LimiteCredito>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LimiteCreditoContrato).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SaldoDevedorFinal).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<MargemContribuicao>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ResultadoAssociados).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<MediaEntradaSemestral>(entity =>
            {
                entity.HasKey(e => new { e.MediaEntradaSemestralID, e.CPF_CNPJ })
                    .HasName("PK_MediaEntradaSemestralID");

                entity.Property(e => e.MediaEntradaSemestralID).ValueGeneratedOnAdd();

                entity.Property(e => e.CPF_CNPJ)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Datas).HasColumnType("date");

                entity.Property(e => e.LancamentoCredito).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<MediaTrimestral>(entity =>
            {
                entity.HasKey(e => new { e.MediaTrimestralID, e.CPF_CNPJ })
                    .HasName("PK_MediaTrimestralID");

                entity.Property(e => e.MediaTrimestralID).ValueGeneratedOnAdd();

                entity.Property(e => e.CPF_CNPJ)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DataMovimento).HasColumnType("date");

                entity.Property(e => e.SaldoMedio).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PatrimonioCadastroAssociado>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DataInicioRelacionamento).HasColumnType("date");

                entity.Property(e => e.DataNascimento).HasColumnType("date");

                entity.Property(e => e.DataUltimaRenovacaoCadastral).HasColumnType("date");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RendaBrutaMensal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorBemImovel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorBemMovel).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PreAprovado>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValorLimiteContratado).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorLimiteUtilizado).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.RoleCode)
                    .HasName("PK_RoleCode");

                entity.Property(e => e.RoleCode).ValueGeneratedNever();

                entity.Property(e => e.TipoDeUsuario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SerasaDetalhado>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tarifas>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Tarifa).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.UsersID).ValueGeneratedNever();

                entity.Property(e => e.DataDeCriacao).HasColumnType("date");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sobrenome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.RoleCodeNavigation)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.RoleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoleCode");
            });

            modelBuilder.Entity<UtilizacaoLimiteCredito>(entity =>
            {
                entity.Property(e => e.UtilizacaoLimiteCreditoID).ValueGeneratedNever();

                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuantidadeDiasUtilizacaoLimiteCredito).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorLimiteCreditoContratato).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorSaldoDevedorFinalLimiteUtilizado).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ValorLimiteCRL>(entity =>
            {
                entity.Property(e => e.CPF_CNPJ)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValorLimiteConcedidoClienteCRL).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValorLimiteUtilizadoClienteCLS).HasColumnType("decimal(18, 2)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}